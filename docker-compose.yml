networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  mysql:
    driver: ${VOLUMES_DRIVER}
  percona:
    driver: ${VOLUMES_DRIVER}
  postgres:
    driver: ${VOLUMES_DRIVER}
  mongo:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  
services:
### Workspace ############################################
  workspace:
    build:
      context: ./workspace
      args:
        - PHP_VERSION=${PHP_VERSION}
        - TZ=${TIME_ZONE}
        - USER_NAME=${USER_NAME}
        - GROUP_NAME=${GROUP_NAME}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    tty: true
    ports:
        - "${FE_PORT}:3000"
        - "${VITE_PORT}:5173"
    networks:
      - frontend
      - backend
    extra_hosts:
      - "host.docker.internal:host-gateway" 
  
### PHP_FPM ############################################## 
  php-fpm:
    build:
      context: ./php-fpm
      args:
        - PHP_VERSION=${PHP_VERSION}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    expose:
      - "9000"
    networks:
      - backend
    extra_hosts:
      - "host.docker.internal:host-gateway" 

### Swoole ###############################################
  swoole:
    build:
      context: ./swoole
    tty: true
    networks:
      - frontend
      - backend

### NGINX Server #########################################
  nginx:
    build:
      context: ./nginx
      args:
        - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
      - ${NGINX_SSL_PATH}:/etc/nginx/ssl
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
    depends_on:
      - php-fpm
    networks:
      - frontend
      - backend
    extra_hosts:
      - "host.docker.internal:host-gateway" 

### MySQL ################################################
  mysql:
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${TIME_ZONE}
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - backend

### Percona ################################################
  percona:
    restart: always
    build:
      context: ./percona
    environment:
      - MYSQL_DATABASE=${PERCONA_DATABASE}
      - MYSQL_USER=${PERCONA_USER}
      - MYSQL_PASSWORD=${PERCONA_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${PERCONA_ROOT_PASSWORD}
    volumes:
      - ${DATA_PATH_HOST}/percona:/var/lib/mysql
      - ${PERCONA_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${PERCONA_PORT}:3306"
    networks:
      - backend

### PostgreSQL ###########################################
  postgres:
    build:
      context: ./postgres
      args:
        - POSTGRES_VERSION=${POSTGRES_VERSION}
    volumes:
      - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
      - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend

### pgbackups PostgreSQL ###########################################
  pgbackups:
    image: prodrigestivill/postgres-backup-local
    restart: always
    volumes:
      - ../backup:/backups
    links:
      - postgres
    environment:
      - POSTGRES_HOST={POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend

### PostgreSQL PostGis ###################################
  postgres-postgis:
    build:
      context: ./postgres-postgis
      args:
        - POSTGIS_VERSION=${POSTGIS_VERSION}
        - INSTALL_PGSQL_HTTP_FOR_POSTGIS13=${POSTGIS_INSTALL_PGSQL_HTTP_FOR_POSTGIS13}
    volumes:
      - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend

### Redis ################################################
  redis:
    build: ./redis
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    command: --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - backend

### Soketi Server ##############################################
  soketi:
    build:
      context: ./soketi
    volumes:
      - ./soketi/config.json:/app/bin/config.json:ro
    ports:
      - "${SOKETI_PORT}:6001"
      - "${SOKETI_METRICS_SERVER_PORT}:9601"
    networks:
      - frontend
      - backend